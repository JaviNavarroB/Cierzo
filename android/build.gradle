// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {
        buildToolsVersion = findProperty('android.buildToolsVersion') ?: '35.0.0'
        minSdkVersion = Integer.parseInt(findProperty('android.minSdkVersion') ?: '24')
        compileSdkVersion = Integer.parseInt(findProperty('android.compileSdkVersion') ?: '35')
        targetSdkVersion = Integer.parseInt(findProperty('android.targetSdkVersion') ?: '34')
        kotlinVersion = findProperty('android.kotlinVersion') ?: '1.9.24'

        ndkVersion = "26.1.10909125"
        jvmTarget = '17'
    }
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath('com.android.tools.build:gradle')
        classpath('com.facebook.react:react-native-gradle-plugin')
        // Add explicit Kotlin stdlib dependencies
        classpath "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.10"
    }
}

apply plugin: "com.facebook.react.rootproject"

allprojects {
    repositories {
        maven {
            // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
            url(new File(['node', '--print', "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim(), '../android'))
        }
        maven {
            // Android JSC is installed from npm
            url(new File(['node', '--print', "require.resolve('jsc-android/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim(), '../dist'))
        }

        google()
        mavenCentral()
        maven { url 'https://www.jitpack.io' }
    }
    configurations.all {
        resolutionStrategy {
            // Remove the dependencySubstitution block
            // dependencySubstitution {
            //     substitute(module("org.jetbrains.kotlin:kotlin-stdlib")).using(module("org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"))
            //     substitute(module("org.jetbrains.kotlin:kotlin-stdlib-common")).using(module("org.jetbrains.kotlin:kotlin-stdlib-common:$kotlinVersion"))
            //     substitute(module("org.jetbrains.kotlin:kotlin-stdlib-jdk8")).using(module("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"))
            //     substitute(module("org.jetbrains.kotlin:kotlin-stdlib-jdk7")).using(module("org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"))
            // }
        }
    }
}

project(':expo-modules-core') {
    configurations.all {
        resolutionStrategy {
            eachDependency { details ->
                if (details.requested.group == "org.jetbrains.kotlin" &&
                    (!details.requested.version || details.requested.version.trim() == "")) {
                    details.useTarget "org.jetbrains.kotlin:${details.requested.name}:$kotlinVersion"
                }
            }
            force(
                "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion",
                "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlinVersion",
                "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
            )
        }
    }
}
